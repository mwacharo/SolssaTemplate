<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\Message;
use App\Models\User;
use App\Models\Client;
use Illuminate\Support\Facades\Log;
use App\Services\AIResponderService;
use App\Services\WhatsAppService;

class WhatsAppWebhookController extends Controller
{
    protected $whatsAppService;

    public function __construct(WhatsAppService $whatsAppService)
    {
        $this->whatsAppService = $whatsAppService;
    }

    public function handle(Request $request)
    {
        $payload = $request->all();
        Log::info('🔔 WhatsApp Webhook Received', $payload);

        $type = $payload['typeWebhook'] ?? 'undefined';

        switch ($type) {
            case 'incomingMessageReceived':
                return $this->handleIncomingMessage($payload);

            case 'outgoingMessageReceived':
                return $this->handleOutgoing($payload);

            case 'outgoingMessageStatus':
                return $this->handleStatusUpdate($payload);

            case 'stateInstanceChanged':
                Log::info('⚙️ Instance state changed', [
                    'state' => $payload['stateInstance'] ?? 'unknown'
                ]);
                break;

            default:
                Log::warning("⚠️ Unhandled or unknown webhook type: {$type}", $payload);
                break;
        }

        return response()->json(['status' => 'received']);
    }

    protected function handleIncomingMessage(array $payload)
    {
        $chatId   = $payload['senderData']['chatId'] ?? null;
        $senderId = $payload['senderData']['senderId'] ?? null;
        $text     = $payload['messageData']['textMessageData']['textMessage'] ?? null;
        $quoted   = $payload['messageData']['quotedMessage']['message'] ?? null;
        $quotedId = $payload['messageData']['quotedMessage']['stanzaId'] ?? null;
        $type     = $payload['messageData']['typeMessage'] ?? 'textMessage';
        $timestamp = now();

        Log::info("🔍 Looking up client by chatId: {$chatId}");
        $user = $this->identifyClient($chatId);

        $recentOrders = [];

        if ($user) {
            Log::info("✅ Client found: {$user->id}");
            $recentOrders = $user->orders()
                ->with(['orderItems', 'vendor', 'rider', 'agent', 'client'])
                ->latest()
                ->take(5)
                ->get();
            Log::info("📦 Recent orders fetched", $recentOrders->toArray());
        } else {
            Log::warning("🚫 No client found for chatId: {$chatId}");
        }

        $ai = new AIResponderService();
        Log::info("🤖 Interpreting customer query: {$text}");
        $reply = $ai->interpretCustomerQuery($text, is_array($recentOrders) ? $recentOrders : $recentOrders->toArray());

        if ($reply) {
            Log::info("📤 Sending AI reply to {$chatId}: {$reply}");
            $this->whatsAppService->sendMessage($chatId, $reply, 1); // 1 = System user
        } else {
            Log::info("ℹ️ No reply generated by AI for {$chatId}");
        }

        Message::create([
            'chat_id' => $chatId,
            'from' => $chatId,
            'to' => 'system',
            'content' => $text,
            'wa_message_id' => $payload['idMessage'] ?? null,
            'quoted_message_id' => $quotedId,
            'quoted_message_text' => $quoted,
            'type' => $type,
            'timestamp' => $timestamp,
            'messageable_type' => \App\Models\User::class,
            'messageable_id' => 1,
        ]);

        Log::info("💬 Message stored from {$chatId} at {$timestamp}");

        return response()->json(['status' => 'stored']);
    }

    protected function handleOutgoing(array $payload)
    {
        $chatId = $payload['senderData']['chatId'] ?? null;
        $senderId = $payload['senderData']['sender'] ?? null;
        $text = $payload['messageData']['textMessageData']['textMessage'] ?? null;

        if (!$chatId || !$text) {
            return response()->json(['error' => 'Missing outgoing data'], 400);
        }

        Log::info("🔍 Identifying sender for chatId: {$senderId}");
        $sender = $this->identifySender($senderId);

        $msg = Message::updateOrCreate(
            ['external_message_id' => $payload['idMessage']],
            [
                'chat_id' => $chatId,
                'from' => 'system',
                'to' => $chatId,
                'content' => $text,
                'message_type' => $payload['messageData']['typeMessage'] ?? 'text',
                'timestamp' => now(),
                'direction' => 'outgoing',
                'message_status' => 'sent',
                'messageable_type' => \App\Models\User::class,
                'messageable_id' => $sender ? $sender->id : 1,
            ]
        );

        return response()->json(['status' => 'stored_outgoing', 'id' => $msg->id]);
    }

    protected function handleStatusUpdate(array $payload)
    {
        $idMessage = $payload['idMessage'] ?? null;
        $status = $payload['status'] ?? null;

        if (!$idMessage || !$status) {
            return response()->json(['error' => 'Missing status data'], 400);
        }

        $msg = Message::where('external_message_id', $idMessage)->first();

        if ($msg) {
            $msg->status = $status;
            $msg->timestamp = now();

            if ($status === 'delivered') {
                $msg->delivered_at = now();
            }

            if ($status === 'read') {
                $msg->read_at = now();
            }

            if ($status === 'failed') {
                $msg->failed_at = now();
            }

            $msg->save();

            return response()->json(['status' => 'updated', 'id' => $msg->id]);
        }

        Log::warning("⚠️ Status update received for unknown message ID: {$idMessage}");

        return response()->json(['warning' => 'Message not found'], 404);
    }

    private function identifyClient($chatId)
    {
        $cleanChatId = preg_replace('/@.*$/', '', $chatId);
        $normalized = ltrim($cleanChatId, '0+');

        $client = Client::where('phone_number', 'like', "%{$normalized}")->first();
        if ($client) return $client;

        if (strlen($normalized) > 9 && str_starts_with($normalized, '254')) {
            $local = '0' . substr($normalized, 3);
            $client = Client::where('phone_number', $local)->first();
            if ($client) return $client;
        }

        return Client::where('phone_number', $cleanChatId)->first();
    }

    private function identifySender($senderId)
    {
        $cleanSenderId = preg_replace('/@.*$/', '', $senderId);
        $normalized = ltrim($cleanSenderId, '0+');

        $user = User::where('phone_number', 'like', "%{$normalized}")->first();
        if ($user) return $user;

        if (strlen($normalized) > 9 && str_starts_with($normalized, '254')) {
            $local = '0' . substr($normalized, 3);
            $user = User::where('phone_number', $local)->first();
            if ($user) return $user;
        }

        return User::where('phone_number', $cleanSenderId)->first();
    }
}
